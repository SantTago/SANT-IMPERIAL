import tkinter as tk
from tkinter import messagebox, filedialog
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.platypus import Paragraph
from reportlab.lib.styles import getSampleStyleSheet
import os

def gerar_pdf(nome_arquivo):
    """
    Gera um arquivo PDF com o cronograma de estudos.
    """
    try:
        # Cria o objeto Canvas para desenhar no PDF
        c = canvas.Canvas(nome_arquivo, pagesize=A4)
        c.setFont("Helvetica-Bold", 16)
        c.drawCentredString(A4[0] / 2, A4[1] - 50, "Cronograma de Estudos ‚Äì Comiss√°ria de Voo")
        c.setFont("Helvetica", 10)
        c.drawCentredString(A4[0] / 2, A4[1] - 70, "N√≠vel Iniciante")

        styles = getSampleStyleSheet()
        style = styles['Normal']
        style.leading = 14 # Espa√ßamento entre linhas

        y_pos = A4[1] - 100

        cronograma = {
            "SEMANA 1 ‚Äì CONHECIMENTOS B√ÅSICOS DE AVIA√á√ÉO": """
Hist√≥ria da avia√ß√£o no Brasil e no mundo
Partes da aeronave (fuselagem, asas, motores, trem de pouso etc.)
√ìrg√£os reguladores: ANAC, ICAO, IATA
Tipos de voos: dom√©stico e internacional
Fun√ß√µes e responsabilidades do comiss√°rio(a)
No√ß√µes b√°sicas de meteorologia

üìù Exerc√≠cio:
Crie um gloss√°rio com 20 siglas ou termos t√©cnicos da avia√ß√£o.
""",
            "SEMANA 2 ‚Äì REGULAMENTA√á√ÉO DA AVIA√á√ÉO CIVIL": """
C√≥digo Brasileiro de Aeron√°utica (CBA)
RBAC 61 e 121 (Regulamentos da ANAC)
Documentos obrigat√≥rios de voo (tripula√ß√£o e aeronave)
Direitos e deveres dos tripulantes
Normas da ICAO (Organiza√ß√£o da Avia√ß√£o Civil Internacional)

üìù Exerc√≠cio:
Monte um resumo com os principais direitos e deveres de um comiss√°rio.
""",
            "SEMANA 3 ‚Äì SEGURAN√áA DE VOO E EMERG√äNCIAS": """
Tipos de emerg√™ncia (fogo, despressuriza√ß√£o, pouso for√ßado, evacua√ß√£o)
Equipamentos de seguran√ßa da aeronave (m√°scaras de oxig√™nio, extintores, escorregadores etc.)
Procedimentos de evacua√ß√£o
Comunica√ß√£o com a cabine
Checklist de seguran√ßa

üìù Exerc√≠cio:
Simule (no papel) uma evacua√ß√£o de emerg√™ncia com os comandos que voc√™ daria aos passageiros.
""",
            "SEMANA 4 ‚Äì PRIMEIROS SOCORROS E SOBREVIV√äNCIA": """
No√ß√µes de primeiros socorros (hemorragias, fraturas, parada card√≠aca)
Atendimento a passageiros com doen√ßas a bordo
Equipamentos m√©dicos de bordo (kit de primeiros socorros, desfibrilador)
T√©cnicas de sobreviv√™ncia (selva, mar, montanha, deserto)

üìù Exerc√≠cio:
Crie um ‚Äúkit de sobreviv√™ncia‚Äù com itens essenciais para cada tipo de ambiente (mar, selva etc.)
"""
        }

        for semana, conteudo in cronograma.items():
            if y_pos < 100: # Se o espa√ßo na p√°gina for insuficiente, cria uma nova p√°gina
                c.showPage()
                y_pos = A4[1] - 50

            # T√≠tulo da semana
            c.setFont("Helvetica-Bold", 12)
            c.drawString(50, y_pos, f"‚úÖ {semana}")
            y_pos -= 20

            # Conte√∫do da semana
            c.setFont("Helvetica", 10)
            linhas = conteudo.strip().split('\n')
            for linha in linhas:
                p = Paragraph(linha.strip(), style)
                largura, altura = p.wrapOn(c, A4[0] - 100, 0)
                if y_pos < altura + 10:
                    c.showPage()
                    y_pos = A4[1] - 50
                p.drawOn(c, 50, y_pos - altura)
                y_pos -= (altura + 5)
            y_pos -= 10

        c.save()
        messagebox.showinfo("Sucesso", f"O cronograma de estudos foi gerado com sucesso!\n\nSalvo como:\n{os.path.abspath(nome_arquivo)}")

    except Exception as e:
        messagebox.showerror("Erro", f"Ocorreu um erro ao gerar o PDF: {e}")

def criar_janela():
    """
    Cria a janela principal da aplica√ß√£o.
    """
    root = tk.Tk()
    root.title("Gerador de Cronograma")
    root.geometry("400x150")
    root.resizable(False, False)

    # Label com as instru√ß√µes
    label = tk.Label(root, text="Clique no bot√£o para gerar o cronograma em PDF.", wraplength=350, pady=10)
    label.pack()

    # Bot√£o para gerar o PDF
    botao = tk.Button(root, text="Gerar PDF", command=lambda: gerar_pdf("cronograma_comissaria.pdf"))
    botao.pack(pady=10)

    # Inicia o loop da aplica√ß√£o
    root.mainloop()

if __name__ == "__main__":
    criar_janela()
